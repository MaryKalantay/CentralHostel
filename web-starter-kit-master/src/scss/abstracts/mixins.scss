// Most used mixins.
//
// Note: If you use a framework (bootstrap, zurb etc.) that includes mixins you can import them too or remove this file.


// Buttons
// ------------------------------
//  BUTTON MIXIN
// ------------------------------
@mixin button($button-color: $accent, $button-text: '', $button-hover: '', $button-border: '', $button-size: '', $button-shadow: '') {
	// Standard Button Styles
	border-radius: 5px;
  display: inline-flex;
  background: $button-color;
	border: 2px solid $button-color;
	padding: 10px 30px 8px;
	color: $button-text;
  text-decoration: none;
  position: relative;
  z-index: 1;
  transform: none;
  @include animate(all, .2s, ease);
  &:hover,
  &:focus {
    border-color: $button-hover;
    color: $button-hover;
    background: $button-hover; 
    transform: none;
   &:after {
      left: 0%;
      right: 0%;
    }
  }
  &:after {
    content: "";
    position: absolute;
    background: $button-hover;
    bottom: 0;
    left: 50%;
    right: 50%;
    top: 0;
    bottom: 0;
    z-index: -1;
    transition: all 0.2s ease-in;
  }
	// Button Size (small or normal (or no value) )
	@if $button-size == small {
		@include font-size(14);
		padding: 8px 30px;
	} @else {
		&.button-small {
			font-size: 14px;
			padding: 8px 30px;
		}
	}

	// Button Border
	// bordered: border is white
	// normal or no value: border is colored
	@if $button-border == bordered {
    background: linear-gradient(45deg, #fff 50%, orange);
    -webkit-background-clip: text;
    -webkit-text-fill-colot: transparent;
    background: none;
    border-color: $white;
    color: $white;
    &:hover {
      border-color: $primary;
      color: $primary;
    }
	} @else {
		&.button-bordered { 
      background: linear-gradient(45deg, #fff 50%, orange);
      -webkit-background-clip: text;
      -webkit-text-fill-colot: transparent;
      border-color: $white;
      color: $white;
      &:hover {
        border-color: $primary;
        color: $black;
        background: none; 
        transform: none;
        &:after {
          left: 0%;
          right: 0%;
        }
      }
      &:after {
        content: "";
        position: absolute;
        background: $primary;
        bottom: 0;
        left: 50%;
        right: 50%;
        top: 0;
        bottom: 0;
        z-index: -1;
        transition: all 0.2s ease-in;
      }
    }
  }
}
/// Mixin helping with long string of the url
/// https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/
/// Usage 
/// @include word-wrap;
@mixin word-wrap() {
  overflow-wrap: break-word;
  word-wrap: break-word;
  -ms-word-break: break-all;
  word-break: break-all;
  word-break: break-word;
  -ms-hyphens: auto;
}

/// font-smothing
/// @include font-smoothing(on);
/// @include font-smoothing(off);
@mixin font-smoothing($value: on){
  @if $value == on{
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  @else{
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}


/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.
///
/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement
///
/// @example scss - Usage
///   .element {
///     @include hide-text;
///   }
///
/// @example css - CSS Output
///   .element {
///     overflow: hidden;
///     text-indent: 101%;
///     white-space: nowrap;
///   }
///
@mixin hide-text {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;
}


/// Creates a visual triangle. 
/// Mixin takes ($size, $color, $direction)
/// The $size argument can take one or two values—width height.
/// The $color argument can take one or two 
/// values—foreground-color background-color.
/// 
/// @author http://bourbon.io/docs/#triangle
///
/// $direction: 
/// up, down, left, right, up-right, up-left, down-right, down-left
/// @example scss - Usage
///   @include triangle(12px, gray, down);
///   @include triangle(12px 6px, gray blue, up-left);
///
@mixin triangle($size, $color, $direction) {
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  } @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left: $width solid $background-color;
    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left: $width solid $background-color;
    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;
  } @else if ($direction == inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}


/// Animate css properties
// usage 
// scss - @include animate(color);
//     or @include animate(color width);
//     or @include animate(color width, 1s, linear);
//     or @include animate(color width, 1s, ease-in, 0.5s); - defining delay ALL params should be passed!
//
$animation-speed: 0.3s !default;

@mixin animate($properties, $duration: $animation-speed, $easing: ease-in-out, $delay: false) {
  @if ($properties and $duration and $easing and $delay) {
    $list:();
    @each $prop in $properties {
      $str: #{$prop} #{$duration} #{$easing} #{$delay};
      $list: append($list, $str, comma);
    }
    transition: $list;
  } @else {
    $list:();
    @each $prop in $properties {
      $str: #{$prop} #{$duration} #{$easing};
      $list: append($list, $str, comma);
    }
    transition: $list;
  }
}


/// Mixin for styling form-placeholders
/// @example scss - Usage
///   @include placeholder {
///    color: #333;
///   }
///
///   input[type='text'],
///   input[type='tel'],
///   input[type='email'] {
///     @include placeholder {
///      color: red;
///     }
///   }

@mixin placeholder {
  &::-webkit-input-placeholder {@content;}
  &::-moz-placeholder {opacity: 1; @content;}
  &:-moz-placeholder {@content;}
  &:-ms-input-placeholder {@content;}
  &.placeholder {@content;}
}